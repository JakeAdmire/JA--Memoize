// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Header should match snapshot 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Header />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <h1>
          ProtoSnack!
        </h1>,
        <p>
          Welcome 
          <span />
          !
        </p>,
        <p>
          <span />
           out of 
          <span>
            30
          </span>
           questions complete!
        </p>,
      ],
      "className": "header",
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": "ProtoSnack!",
        },
        "ref": null,
        "rendered": "ProtoSnack!",
        "type": "h1",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            "Welcome ",
            <span />,
            "!",
          ],
        },
        "ref": null,
        "rendered": Array [
          "Welcome ",
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": undefined,
            },
            "ref": null,
            "rendered": null,
            "type": "span",
          },
          "!",
        ],
        "type": "p",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <span />,
            " out of ",
            <span>
              30
            </span>,
            " questions complete!",
          ],
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": null,
            },
            "ref": null,
            "rendered": null,
            "type": "span",
          },
          " out of ",
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": "30",
            },
            "ref": null,
            "rendered": "30",
            "type": "span",
          },
          " questions complete!",
        ],
        "type": "p",
      },
    ],
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <h1>
            ProtoSnack!
          </h1>,
          <p>
            Welcome 
            <span />
            !
          </p>,
          <p>
            <span />
             out of 
            <span>
              30
            </span>
             questions complete!
          </p>,
        ],
        "className": "header",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "ProtoSnack!",
          },
          "ref": null,
          "rendered": "ProtoSnack!",
          "type": "h1",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              "Welcome ",
              <span />,
              "!",
            ],
          },
          "ref": null,
          "rendered": Array [
            "Welcome ",
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": undefined,
              },
              "ref": null,
              "rendered": null,
              "type": "span",
            },
            "!",
          ],
          "type": "p",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <span />,
              " out of ",
              <span>
                30
              </span>,
              " questions complete!",
            ],
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": null,
              },
              "ref": null,
              "rendered": null,
              "type": "span",
            },
            " out of ",
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "30",
              },
              "ref": null,
              "rendered": "30",
              "type": "span",
            },
            " questions complete!",
          ],
          "type": "p",
        },
      ],
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
